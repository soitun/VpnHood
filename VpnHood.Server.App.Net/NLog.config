<?xml version="1.0" encoding="utf-8"?>

<!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogFile="logs/internal.log"
      internalLogLevel="Info">

  <!-- the targets to write to -->
  <targets>

    <!-- log -->
    <target xsi:type="File" name="logfile2" archiveOldFileOnStartup="true"
            layout="${longdate} | ${level} | ${event-properties:EventName} | ${ndlc:separator= => } ${newline} ${message} ${exception:format=type,message} ${newline}"
            fileName="${currentdir}/logs/log.txt" archiveFileName="${currentdir}/logs/log-archive/log.{#}.txt"
            archiveNumbering="DateAndSequence"
            archiveAboveSize="10000000" keepFileOpen="true" maxArchiveDays="30" maxArchiveFiles="100"/>

    <!--Console-->
    <target xsi:type="ColoredConsole" name="logconsole" useDefaultRowHighlightingRules="false"
            layout="${date} | ${level} | ${event-properties:EventName} | ${ndlc:separator= => } ${newline} ${message} ${exception:format=type,message} ${newline}">
      <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
      <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
    </target>

    <!-- tracking -->
    <target xsi:type="File" name="trackfile" archiveOldFileOnStartup="true"
            fileName="${currentdir}/logs/track.txt" archiveFileName="${currentdir}/logs/track-archive/track.{#}.txt"
            archiveNumbering="Date"
            archiveEvery="Hour"
            keepFileOpen="true" maxArchiveDays="31"
            layout="${longdate}&#x9;${message}" />

  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <logger name="*" minlevel="Info" writeTo="logfile,logconsole">
      <filters defaultAction="Log">
        <when condition="level >= LogLevel.Warn" action="Log" />
        <when condition="'${event-properties:EventName}'=='Session'" action="Log" />
        <when condition="'${event-properties:EventName}'=='Protect'" action="Log" />
        <when condition="'${event-properties:EventName}'=='Tls'" action="Ignore" />
        <when condition="'${event-properties:EventName}'=='Tcp'" action="Ignore" />
        <when condition="'${event-properties:EventName}'=='Ping'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
        <when condition="'${event-properties:EventName}'=='Nat'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
        <when condition="'${event-properties:EventName}'=='Udp'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
        <when condition="'${event-properties:EventName}'=='DatagramChannel'" action="Ignore" />
        <when condition="'${event-properties:EventName}'=='StreamChannel'" action="Ignore" />
        <when condition="'${event-properties:EventName}'=='AccessServer'" action="Ignore" />
        <when condition="'${event-properties:EventName}'=='Track'" action="Ignore" /> <!--Keep it Ignore. see target:trackfile -->
      </filters>
    </logger>

    <logger name="*" minlevel="Info" writeTo="trackfile">
      <filters defaultAction="Ignore">
        <when condition="'${event-properties:EventName}'=='Track'" action="Log" />
      </filters>
    </logger>

  </rules>
</nlog>