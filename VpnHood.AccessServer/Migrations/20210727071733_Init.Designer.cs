// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VpnHood.AccessServer.Models;

namespace VpnHood.AccessServer.Migrations
{
    [DbContext(typeof(VhContext))]
    [Migration("20210727071733_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_100_CS_AS_SC_UTF8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessToken", b =>
                {
                    b.Property<Guid>("AccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTokenGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTokenName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("Lifetime")
                        .HasColumnType("int");

                    b.Property<int>("MaxClient")
                        .HasColumnType("int");

                    b.Property<long>("MaxTraffic")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Secret")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SupportCode")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AccessTokenId");

                    b.HasIndex("AccessTokenGroupId");

                    b.HasIndex("SupportCode")
                        .IsUnique();

                    b.ToTable("AccessTokens");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessTokenGroup", b =>
                {
                    b.Property<Guid>("AccessTokenGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTokenGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("AccessTokenGroupId");

                    b.HasIndex("AccountId", "AccessTokenGroupName")
                        .IsUnique()
                        .HasFilter("[AccessTokenGroupName] IS NOT NULL");

                    b.ToTable("AccessTokenGroups");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessUsage", b =>
                {
                    b.Property<Guid>("AccessTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasMaxLength(20)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConnectTime")
                        .HasColumnType("datetime");

                    b.Property<long>("CycleReceivedTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("CycleSentTraffic")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<long>("TotalReceivedTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSentTraffic")
                        .HasColumnType("bigint");

                    b.HasKey("AccessTokenId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("AccessUsages");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessUsageLog", b =>
                {
                    b.Property<long>("AccessUsageLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccessTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<long>("CycleReceivedTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("CycleSentTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceivedTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("SentTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalReceivedTraffic")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSentTraffic")
                        .HasColumnType("bigint");

                    b.HasKey("AccessUsageLogId");

                    b.HasIndex("AccessTokenId");

                    b.HasIndex("ClientId");

                    b.ToTable("AccessUsageLogs");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.PublicCycle", b =>
                {
                    b.Property<string>("PublicCycleId")
                        .HasMaxLength(12)
                        .HasColumnType("nchar(12)")
                        .IsFixedLength(true);

                    b.HasKey("PublicCycleId");

                    b.ToTable("PublicCycles");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Server", b =>
                {
                    b.Property<Guid>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastSessionCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStatusTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ServerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServerId");

                    b.HasIndex("AccountId", "ServerName")
                        .IsUnique()
                        .HasFilter("[ServerName] IS NOT NULL");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.ServerEndPoint", b =>
                {
                    b.Property<Guid>("ServerEndPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTokenGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CertificateRawData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LocalEndPoint")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PulicEndPoint")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServerEndPointId");

                    b.HasIndex("ServerId");

                    b.HasIndex("AccessTokenGroupId", "IsDefault")
                        .IsUnique()
                        .HasFilter("IsDefault = 1");

                    b.HasIndex("AccountId", "LocalEndPoint")
                        .IsUnique()
                        .HasFilter("LocalEndPoint IS NOT NULL");

                    b.HasIndex("AccountId", "PulicEndPoint");

                    b.ToTable("ServerEndPoints");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Setting", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsProduction")
                        .HasColumnType("bit");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthUserId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessToken", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.AccessTokenGroup", "AccessTokenGroup")
                        .WithMany("AccessTokens")
                        .HasForeignKey("AccessTokenGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessTokenGroup");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessTokenGroup", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.Account", "Account")
                        .WithMany("AccessTokenGroups")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessUsage", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.AccessToken", "AccessToken")
                        .WithMany("AccessUsages")
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VpnHood.AccessServer.Models.Client", "Client")
                        .WithMany("AccessUsages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessToken");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessUsageLog", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.AccessToken", "AccessToken")
                        .WithMany()
                        .HasForeignKey("AccessTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VpnHood.AccessServer.Models.Client", "Client")
                        .WithMany("AccessUsageLogs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessToken");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Server", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.Account", "Account")
                        .WithMany("Servers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.ServerEndPoint", b =>
                {
                    b.HasOne("VpnHood.AccessServer.Models.AccessTokenGroup", "AccessTokenGroup")
                        .WithMany("ServerEndPoints")
                        .HasForeignKey("AccessTokenGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VpnHood.AccessServer.Models.Account", "Account")
                        .WithMany("ServerEndPoints")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VpnHood.AccessServer.Models.Server", "Server")
                        .WithMany("ServerEndPoints")
                        .HasForeignKey("ServerId");

                    b.Navigation("AccessTokenGroup");

                    b.Navigation("Account");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessToken", b =>
                {
                    b.Navigation("AccessUsages");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.AccessTokenGroup", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("ServerEndPoints");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Account", b =>
                {
                    b.Navigation("AccessTokenGroups");

                    b.Navigation("ServerEndPoints");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Client", b =>
                {
                    b.Navigation("AccessUsageLogs");

                    b.Navigation("AccessUsages");
                });

            modelBuilder.Entity("VpnHood.AccessServer.Models.Server", b =>
                {
                    b.Navigation("ServerEndPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
