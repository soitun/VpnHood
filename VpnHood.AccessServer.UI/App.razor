@using VpnHood.AccessServer.UI.Apis
@using Microsoft.AspNetCore.WebUtilities

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager Navigation;
@inject HttpClient Http;
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage;

<CascadingAuthenticationState>
    @if (_loading)
    {
        <LayoutView>
            <MudLayout>
                <MudContainer MaxWidth="MaxWidth.Large">
                    <MudProgressLinear Color="Color.Default" Indeterminate="true" />
                </MudContainer>
            </MudLayout>
        </LayoutView>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if (context.User.Identity?.IsAuthenticated == false)
                        {
                            <RedirectToLogin />
                        }
                        else
                        {
                            <p>@Loc["Unauthorized"]</p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <MudContainer MaxWidth="MaxWidth.Small">
                        <MudText Align="Align.Center"><b>@Loc["NothingAtThisAddress"]</b></MudText>
                    </MudContainer>
                </LayoutView>
            </NotFound>
        </Router>
    }

</CascadingAuthenticationState>

@code
{
    private bool _loading = false;
    protected override Task OnInitializedAsync()
    {
        //AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        //OnAuthenticationStateChanged(AuthenticationStateProvider.GetAuthenticationStateAsync());

        return base.OnInitializedAsync();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        _ = InvokeAsync(async () =>
        {
            _loading = true;
            var authenticationState = await task;
            if (authenticationState.User?.Identity?.IsAuthenticated == true)
            {
            }

            _loading = false;
            StateHasChanged();
        });
    }
}

