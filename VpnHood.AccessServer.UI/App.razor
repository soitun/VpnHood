@inject AuthenticationStateProvider AuthenticationStateProvider;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated == false)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>@Loc["Unauthorized"]</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer MaxWidth="MaxWidth.Small">
                    <MudText Align="Align.Center"><b>@Loc["NothingAtThisAddress"]</b></MudText>
                </MudContainer>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{
    private bool authenticated;
    protected override async Task OnInitializedAsync()
    {
        Task<AuthenticationState> _currentAuthenticationStateTask;

        AuthenticationStateProvider.AuthenticationStateChanged +=
            OnAuthenticationStateChanged;

        _currentAuthenticationStateTask =
            AuthenticationStateProvider.GetAuthenticationStateAsync();

        var a = await _currentAuthenticationStateTask;
        Console.WriteLine(a.User.Identity.IsAuthenticated);
        Console.WriteLine("sss");

        OnAuthenticationStateChanged(_currentAuthenticationStateTask);
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        _ = InvokeAsync(async () =>
        {
            await Task.Delay(5000);
            var authState = await task;
            var user = authState.User;


            authenticated = user.Identity?.IsAuthenticated ?? false;
            StateHasChanged();
            Console.WriteLine("zzz");
        });
    }
}

